// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String?  @unique
  hashedPassword String?
  image          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  accounts   Account[]
  Store      Store[]
  collection Collection[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  seesion_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Store {
  id           String         @id @default(uuid())
  storeName    String
  status       String         @default("open")
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  collection   Collection[]
  products     Product[]
  size         ProductSize[]
  color        ProductColor[]
  payments     Payment[]
  ProductGroup ProductGroup[]

  @@index([userId])
}

model Collection {
  id              String    @id @default(uuid())
  collectionName  String    @unique
  collectionImage String
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  storeId         String
  store           Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]

  @@index([storeId])
  @@index([userId])
}

model Product {
  id             String         @id @default(uuid())
  productName    String
  productImages  String[]
  colors         String
  sizes          String
  price          Float
  diliveryPrice  Float
  quantity       Int
  groupe         String
  storeId        String
  store          Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  collectionName String?
  collection     Collection?    @relation(fields: [collectionName], references: [collectionName], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  paymentItems   PaymentItems[]

  @@index([storeId])
}

model ProductSize {
  id        String   @id @default(uuid())
  size      String
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model ProductColor {
  id        String   @id @default(uuid())
  color     String
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model ProductGroup {
  id        String   @id @default(uuid())
  groupe    String
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Payment {
  id           String         @id @default(uuid())
  storeId      String
  isPaid       Boolean        @default(false)
  phone        String
  address      String
  quantity     Int
  store        Store          @relation(fields: [storeId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  paymentItems PaymentItems[]

  @@index([storeId])
}

model PaymentItems {
  id        String  @id @default(uuid())
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
